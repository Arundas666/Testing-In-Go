// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	"fmt"
	reflect "reflect"
	entity "test/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockRegisterUserUseCase is a mock of RegisterUserUseCase interface.
type MockRegisterUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserUseCaseMockRecorder
}

// MockRegisterUserUseCaseMockRecorder is the mock recorder for MockRegisterUserUseCase.
type MockRegisterUserUseCaseMockRecorder struct {
	mock *MockRegisterUserUseCase
}

// NewMockRegisterUserUseCase creates a new mock instance.
func NewMockRegisterUserUseCase(ctrl *gomock.Controller) *MockRegisterUserUseCase {
	mock := &MockRegisterUserUseCase{ctrl: ctrl}
	mock.recorder = &MockRegisterUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserUseCase) EXPECT() *MockRegisterUserUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRegisterUserUseCase) Execute(ctx context.Context, input entity.CreateUserInput) (entity.User, error) {
	m.ctrl.T.Helper()
	fmt.Println("HEYYYYY")
	fmt.Println("HEYYYYY")
	fmt.Println("HEYYYYY")
	fmt.Println("HEYYYYY")
	fmt.Println("INPUT",input)
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRegisterUserUseCaseMockRecorder) Execute(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegisterUserUseCase)(nil).Execute), ctx, input)
}
