name: CI-STAGING-YWORK

on:
  push:
    branches: [main]
 
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

env:
          IMAGE_NAME: test
          REPO: test

jobs:
            build-and-deploy:
              name: Build, Push, and Deploy Backend Docker Image
              runs-on: ubuntu-latest
              steps:
                - name: Checkout
                  uses: actions/checkout@v3
                - name: Set up QEMU
                  uses: docker/setup-qemu-action@v2
                - name: Set up Docker Buildx
                  uses: docker/setup-buildx-action@v2
                - name: Login to DockerHub
                  uses: docker/login-action@v2
                  with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
                - name: Generate short SHA and store it as an environment variable
                  run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
                - name: Build and push Docker image
                  uses: docker/build-push-action@v3
                  with:
                    context: .
                    push: true
                    tags: |
                      ywork/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
                      ywork/${{ env.IMAGE_NAME }}:latest
          
                - name: Deploy to Digital Ocean droplet via SSH action
                  uses: appleboy/ssh-action@master
                  with:
                    host: ${{ secrets.HOST_IP }}
                    username: ${{ secrets.HOST_USERNAME }}
                    key: ${{ secrets.HOST_SSH }}
                    script: |
                      docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          
                      if [ "$(docker ps -q -f name=${{ env.REPO }})" ]; then
                        docker stop ${{ env.REPO }}
                        docker rm ${{ env.REPO }}
                      fi
                
                      if [ "$(docker images -q ${{env.REPO}}/${{ env.IMAGE_NAME }})" ]; then
                        docker rmi -f ${{env.REPO}}/${{ env.IMAGE_NAME }}
                      fi
                      
                      docker run -p 8000:8000 -d \
                        --restart always \
                        --env-file=.env \
                        --name ${{env.REPO}} \
                        ${{env.REPO}}/${{ env.IMAGE_NAME }}